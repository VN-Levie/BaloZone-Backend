# =====================================================
# BALOZONE ADMIN API COMPREHENSIVE TEST
# =====================================================
# Test tất cả các API admin và kiểm tra tính năng thống kê
# Base URL: http://localhost:8000/api
# Admin Account: admin@balozone.com / admin123
# =====================================================

### 1. ĐĂNG NHẬP ADMIN
POST http://localhost:8000/api/auth/login
Content-Type: application/json

{
  "email": "admin@balozone.com",
  "password": "admin123"
}

> {%
  if (response.status === 200) {
    client.global.set("admin_token", response.body.access_token);
    console.log("✅ Admin login successful");
    console.log("Token saved for subsequent requests");
  } else {
    console.log("❌ Admin login failed:", response.body);
  }
%}

### =====================================================
### 2. KIỂM TRA THÔNG TIN ADMIN
### =====================================================

GET http://localhost:8000/api/auth/me
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Admin profile:", response.body.user.name);
    console.log("Role:", response.body.user.roles);
  } else {
    console.log("❌ Failed to get admin profile");
  }
%}

### =====================================================
### 3. QUẢN LÝ NGƯỜI DÙNG (ADMIN USERS)
### =====================================================

### 3.1. Lấy danh sách tất cả người dùng
GET http://localhost:8000/api/admin/users?page=1&per_page=10
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Users list retrieved");
    console.log("Total users:", response.body.data.total);
    client.global.set("test_user_id", response.body.data.data[0].id);
  } else {
    console.log("❌ Failed to get users list");
  }
%}

### 3.2. Tìm kiếm người dùng
GET http://localhost:8000/api/admin/users?search=test&status=active
Authorization: Bearer {{admin_token}}

### 3.3. Lấy chi tiết một người dùng
GET http://localhost:8000/api/admin/users/{{test_user_id}}
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ User details retrieved");
    console.log("User:", response.body.data.name);
    console.log("Orders count:", response.body.data.order_summary?.total_orders || 0);
  }
%}

### 3.4. Cập nhật thông tin người dùng
PUT http://localhost:8000/api/admin/users/{{test_user_id}}
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "name": "Test User Updated",
  "phone": "0987654321",
  "status": "active"
}

### 3.5. Chuyển đổi trạng thái người dùng
POST http://localhost:8000/api/admin/users/{{test_user_id}}/toggle-status
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ User status toggled:", response.body.data.status);
  }
%}

### =====================================================
### 4. QUẢN LÝ ĐƠN HÀNG (ADMIN ORDERS)
### =====================================================

### 4.1. Lấy danh sách tất cả đơn hàng
GET http://localhost:8000/api/admin/orders?page=1&per_page=10
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Orders list retrieved");
    console.log("Total orders:", response.body.data.total);
    if (response.body.data.data.length > 0) {
      client.global.set("test_order_id", response.body.data.data[0].id);
    }
  }
%}

### 4.2. Lọc đơn hàng theo trạng thái
GET http://localhost:8000/api/admin/orders?status=pending&payment_method=cod
Authorization: Bearer {{admin_token}}

### 4.3. Lọc đơn hàng theo thời gian
GET http://localhost:8000/api/admin/orders?from_date=2025-01-01&to_date=2025-12-31
Authorization: Bearer {{admin_token}}

### 4.4. Cập nhật trạng thái đơn hàng
PUT http://localhost:8000/api/orders/{{test_order_id}}/status
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "status": "processing",
  "note": "Đơn hàng đang được xử lý bởi admin"
}

> {%
  if (response.status === 200) {
    console.log("✅ Order status updated:", response.body.data.status);
  }
%}

### =====================================================
### 5. QUẢN LÝ LIÊN HỆ (ADMIN CONTACTS)
### =====================================================

### 5.1. Lấy danh sách liên hệ
GET http://localhost:8000/api/admin/contacts?page=1&per_page=10
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Contacts list retrieved");
    console.log("Total contacts:", response.body.data.total);
    if (response.body.data.data.length > 0) {
      client.global.set("test_contact_id", response.body.data.data[0].id);
    }
  }
%}

### 5.2. Lọc liên hệ theo trạng thái
GET http://localhost:8000/api/admin/contacts?status=pending
Authorization: Bearer {{admin_token}}

### 5.3. Tìm kiếm liên hệ
GET http://localhost:8000/api/admin/contacts?search=balo
Authorization: Bearer {{admin_token}}

### 5.4. Cập nhật trạng thái liên hệ
PUT http://localhost:8000/api/contacts/{{test_contact_id}}
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "status": "processing",
  "admin_notes": "Đang xử lý yêu cầu liên hệ",
  "priority": "normal"
}

### =====================================================
### 6. QUẢN LÝ VAI TRÒ (ROLES)
### =====================================================

### 6.1. Lấy danh sách vai trò
GET http://localhost:8000/api/roles
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Roles list retrieved");
    console.log("Available roles:", response.body.data.map(r => r.name));
  }
%}

### 6.2. Gán vai trò cho người dùng
POST http://localhost:8000/api/roles/assign
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "user_id": {{test_user_id}},
  "role_name": "customer"
}

### 6.3. Xóa vai trò khỏi người dùng
POST http://localhost:8000/api/roles/remove
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "user_id": {{test_user_id}},
  "role_name": "contributor"
}

### =====================================================
### 7. QUẢN LÝ THƯƠNG HIỆU (BRANDS)
### =====================================================

### 7.1. Tạo thương hiệu mới
POST http://localhost:8000/api/brands
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "name": "Test Brand Admin",
  "description": "Thương hiệu test từ admin",
  "status": "active"
}

> {%
  if (response.status === 201) {
    console.log("✅ Brand created:", response.body.data.name);
    client.global.set("test_brand_id", response.body.data.id);
  }
%}

### 7.2. Cập nhật thương hiệu
PUT http://localhost:8000/api/brands/{{test_brand_id}}
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "name": "Test Brand Updated",
  "description": "Thương hiệu đã được cập nhật",
  "status": "active"
}

### 7.3. Xóa thương hiệu
DELETE http://localhost:8000/api/brands/{{test_brand_id}}
Authorization: Bearer {{admin_token}}

### =====================================================
### 8. QUẢN LÝ DANH MỤC (CATEGORIES)
### =====================================================

### 8.1. Tạo danh mục mới
POST http://localhost:8000/api/categories
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "name": "Test Category Admin",
  "description": "Danh mục test từ admin"
}

> {%
  if (response.status === 201) {
    console.log("✅ Category created:", response.body.data.name);
    client.global.set("test_category_id", response.body.data.id);
  }
%}

### 8.2. Cập nhật danh mục
PUT http://localhost:8000/api/categories/{{test_category_id}}
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "name": "Test Category Updated",
  "description": "Danh mục đã được cập nhật"
}

### 8.3. Xóa danh mục
DELETE http://localhost:8000/api/categories/{{test_category_id}}
Authorization: Bearer {{admin_token}}

### =====================================================
### 9. QUẢN LÝ SẢN PHẨM (PRODUCTS)
### =====================================================

### 9.1. Tạo sản phẩm mới
POST http://localhost:8000/api/products
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "category_id": 1,
  "brand_id": 1,
  "name": "Balo Test Admin",
  "description": "Sản phẩm test từ admin",
  "price": 999000,
  "quantity": 50,
  "color": "Đen"
}

> {%
  if (response.status === 201) {
    console.log("✅ Product created:", response.body.data.name);
    client.global.set("test_product_id", response.body.data.id);
  }
%}

### 9.2. Cập nhật sản phẩm
PUT http://localhost:8000/api/products/{{test_product_id}}
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "name": "Balo Test Updated",
  "description": "Sản phẩm đã được cập nhật",
  "price": 1299000,
  "quantity": 100
}

### 9.3. Xóa sản phẩm
DELETE http://localhost:8000/api/products/{{test_product_id}}
Authorization: Bearer {{admin_token}}

### =====================================================
### 10. QUẢN LÝ VOUCHER
### =====================================================

### 10.1. Tạo voucher mới
POST http://localhost:8000/api/vouchers
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "code": "ADMIN_TEST",
  "name": "Voucher Test Admin",
  "description": "Voucher test từ admin",
  "discount_type": "percentage",
  "discount_value": 15,
  "minimum_order_amount": 500000,
  "max_usage": 100,
  "start_date": "2025-01-01",
  "end_date": "2025-12-31",
  "is_active": true
}

> {%
  if (response.status === 201) {
    console.log("✅ Voucher created:", response.body.data.code);
    client.global.set("test_voucher_id", response.body.data.id);
  }
%}

### 10.2. Cập nhật voucher
PUT http://localhost:8000/api/vouchers/{{test_voucher_id}}
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "name": "Voucher Updated",
  "discount_value": 20,
  "max_usage": 200
}

### 10.3. Xóa voucher
DELETE http://localhost:8000/api/vouchers/{{test_voucher_id}}
Authorization: Bearer {{admin_token}}

### =====================================================
### 11. QUẢN LÝ SALE CAMPAIGNS
### =====================================================

### 11.1. Lấy danh sách campaigns
GET http://localhost:8000/api/sale-campaigns
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Sale campaigns retrieved");
    if (response.body.data.length > 0) {
      client.global.set("test_campaign_id", response.body.data[0].id);
    }
  }
%}

### 11.2. Tạo campaign mới
POST http://localhost:8000/api/sale-campaigns
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "name": "Sale Admin Test",
  "description": "Campaign test từ admin",
  "start_date": "2025-01-15",
  "end_date": "2025-01-31",
  "status": "active",
  "is_featured": true,
  "priority": 5
}

> {%
  if (response.status === 201) {
    console.log("✅ Sale campaign created:", response.body.data.name);
    client.global.set("new_campaign_id", response.body.data.id);
  }
%}

### 11.3. Thêm sản phẩm vào campaign
POST http://localhost:8000/api/sale-campaigns/{{new_campaign_id}}/products
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "products": [
    {
      "product_id": 1,
      "sale_price": 800000,
      "discount_type": "percentage",
      "discount_percentage": 20
    },
    {
      "product_id": 2,
      "sale_price": 1200000,
      "discount_type": "fixed_amount",
      "discount_amount": 300000
    }
  ]
}

### 11.4. Xóa campaign
DELETE http://localhost:8000/api/sale-campaigns/{{new_campaign_id}}
Authorization: Bearer {{admin_token}}

### =====================================================
### 12. QUẢN LÝ TIN TỨC (NEWS)
### =====================================================

### 12.1. Tạo tin tức mới
POST http://localhost:8000/api/news
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "title": "Tin tức test từ admin",
  "content": "Nội dung tin tức test để kiểm tra API admin",
  "excerpt": "Tóm tắt tin tức test",
  "featured_image": "test-image.jpg",
  "status": "published",
  "is_featured": true
}

> {%
  if (response.status === 201) {
    console.log("✅ News created:", response.body.data.title);
    client.global.set("test_news_id", response.body.data.id);
  }
%}

### 12.2. Cập nhật tin tức
PUT http://localhost:8000/api/news/{{test_news_id}}
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "title": "Tin tức đã cập nhật",
  "content": "Nội dung đã được cập nhật bởi admin"
}

### 12.3. Xóa tin tức
DELETE http://localhost:8000/api/news/{{test_news_id}}
Authorization: Bearer {{admin_token}}

### =====================================================
### 13. QUẢN LÝ PHƯƠNG THỨC THANH TOÁN
### =====================================================

### 13.1. Tạo phương thức thanh toán
POST http://localhost:8000/api/payment-methods
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "name": "Test Payment Method",
  "description": "Phương thức thanh toán test",
  "code": "TEST_PAY",
  "is_active": true,
  "sort_order": 10
}

> {%
  if (response.status === 201) {
    console.log("✅ Payment method created:", response.body.data.name);
    client.global.set("test_payment_id", response.body.data.id);
  }
%}

### 13.2. Cập nhật phương thức thanh toán
PUT http://localhost:8000/api/payment-methods/{{test_payment_id}}
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "name": "Test Payment Updated",
  "description": "Phương thức thanh toán đã cập nhật"
}

### 13.3. Xóa phương thức thanh toán
DELETE http://localhost:8000/api/payment-methods/{{test_payment_id}}
Authorization: Bearer {{admin_token}}

### =====================================================
### 14. API THỐNG KÊ CHO DASHBOARD ADMIN
### =====================================================

### 14.1. Thống kê người dùng
GET http://localhost:8000/api/user-stats
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ User stats retrieved");
    console.log("Stats:", JSON.stringify(response.body.data, null, 2));
  }
%}

### 14.2. Thống kê đơn hàng
GET http://localhost:8000/api/orders-stats
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Orders stats retrieved");
    console.log("Stats:", JSON.stringify(response.body.data, null, 2));
  }
%}

### =====================================================
### 15. KIỂM TRA CÁC API THỐNG KÊ BỔ SUNG (NẾU CÓ)
### =====================================================

### 15.1. Thống kê đơn hàng admin (nếu có)
GET http://localhost:8000/api/admin/orders/statistics
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Admin orders statistics available");
    console.log("Stats:", JSON.stringify(response.body.data, null, 2));
  } else if (response.status === 404) {
    console.log("⚠️ Admin orders statistics endpoint not implemented");
  }
%}

### 15.2. Thống kê liên hệ admin (nếu có)
GET http://localhost:8000/api/admin/contacts/statistics
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Admin contacts statistics available");
    console.log("Stats:", JSON.stringify(response.body.data, null, 2));
  } else if (response.status === 404) {
    console.log("⚠️ Admin contacts statistics endpoint not implemented");
  }
%}

### 15.3. Thống kê sale campaigns (nếu có)
GET http://localhost:8000/api/admin/sale-campaigns/stats
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Sale campaigns statistics available");
    console.log("Stats:", JSON.stringify(response.body.data, null, 2));
  } else if (response.status === 404) {
    console.log("⚠️ Sale campaigns statistics endpoint not implemented");
  }
%}

### =====================================================
### 16. DASHBOARD TỔNG QUAN (KIẾN NGHỊ)
### =====================================================

### 16.1. API Dashboard tổng quan (kiến nghị - chưa implement)
GET http://localhost:8000/api/admin/dashboard
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Dashboard API available");
    console.log("Dashboard data:", JSON.stringify(response.body.data, null, 2));
  } else if (response.status === 404) {
    console.log("⚠️ Dashboard API not implemented - RECOMMENDATION:");
    console.log("   Should implement /api/admin/dashboard with:");
    console.log("   - Total users, orders, products, revenue");
    console.log("   - Recent activities");
    console.log("   - Chart data for analytics");
    console.log("   - Top selling products");
    console.log("   - Recent orders");
  }
%}

### =====================================================
### 17. TEST XÓA DỮ LIỆU TEST (CLEANUP)
### =====================================================

### 17.1. Đăng xuất admin
POST http://localhost:8000/api/auth/logout
Authorization: Bearer {{admin_token}}

> {%
  if (response.status === 200) {
    console.log("✅ Admin logout successful");
    console.log("🎉 ADMIN API TEST COMPLETED!");
    console.log("");
    console.log("📊 TEST SUMMARY:");
    console.log("   - User Management: ✅");
    console.log("   - Order Management: ✅");
    console.log("   - Contact Management: ✅");
    console.log("   - Role Management: ✅");
    console.log("   - Content Management: ✅");
    console.log("   - Sale Campaigns: ✅");
    console.log("   - Basic Statistics: ✅");
    console.log("");
    console.log("🔍 MISSING FEATURES DETECTED:");
    console.log("   - Admin Dashboard API");
    console.log("   - Advanced Statistics APIs");
    console.log("   - Real-time Analytics");
    console.log("");
    console.log("💡 RECOMMENDATIONS:");
    console.log("   1. Implement /api/admin/dashboard");
    console.log("   2. Add more detailed statistics APIs");
    console.log("   3. Consider real-time notifications");
    console.log("   4. Add export functionality for reports");
  }
%}

### =====================================================
### END OF ADMIN API TESTS
### =====================================================
